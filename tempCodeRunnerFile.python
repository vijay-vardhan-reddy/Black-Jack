# BlackJack Simulator

## A popular game played in casino

### The banker is an automated agent and the player interacts with that agent
import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True
class Card:

    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        
    def __str__(self):
        return self.rank + ' of ' + self.suit
class Deck:
    
    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit,rank))  # build Card objects and add them to the list
    
    def __str__(self):
        deck_comp = ''  # start with an empty string
        for card in self.deck:
            deck_comp += '\n '+card.__str__() # add each Card object's print string
        return 'The deck has:' + deck_comp

    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card = self.deck.pop()
        return single_card
d1=Deck()
print(d1)
class Hand:
    
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0   # start with zero value
        self.aces = 0    # add an attribute to keep track of aces
    
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == 'Ace':
            self.aces += 1  # add to self.aces
    
    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1 
class Chips:
    def __init__(self):
        self.total=100
        self.bet=0
    def win_bet(self):
        self.total+=self.bet
    def lose_bet(self):
        self.total-=self.bet
    def __str__(self):
        return f"{self.total}"
def take_bet(chips):
    while True:
        try:
            chips.bet=int(input("How much?:"))
        except:
            print("Enter integer")
        else:
            if(chips.bet > chips.total):
                print(f"Sorry , You are broke! you have :{chips.total}")
            else:
                break
    
c1=Chips()
def hit(deck,hand):
    hand.add_card(deck.deal())
    hand.adjust_for_ace()
    
    
def hit_or_stand(deck,hand):
    global playing
    
    while True:
        x=input('Hit or stand h or s:')
        if x[0].lower()=='h':
            hit(deck,hand)
            
        elif x[0].lower()=='s':
            print("Player Stands Dealers's Turn")
            playing=False
    
        else:
            print("Sorry,please try again")
            continue
        break
def show_some(player,dealer):
    print("\n Dealer's Hand: ")
    print("First Card hidden!")
    print(dealer.cards[1])
    
    print("\n Player's hand: ")
    for i in player.cards:
        print(i)


def show_all(player,dealer):
    print("\n Dealer's hand:")
    for card in dealer.cards:
        print(card)
    print(f"Value of Dealer's hand is: {dealer.value}")
    
    print("\n Player's hand:")
    for card in player.cards:
        print(card)
    print("\n Players Cards :",*player.cards,sep="\n")
        
    
    
    

    
    

     
def player_busts(player,dealer,chips):
    print("Bust Player")
    chips.lose_bet()
def player_wins(player,dealer,chips):
    print("Player wins")
    chips.win_bet()
def dealer_bursts(player,dealer,chips):
    print("Bust Dealer")
    chips.win_bet()
def dealer_wins(player,dealer,chips):
    print("Dealer Wins")
    chips.lose_bet()
def push(player,dealer):
    print('Dealer and player tie! PUSH')
while True:
    print("Welcome to BlackJack")
    
    deck=Deck()
    deck.shuffle()
    
    player_hand=Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())
    
    dealer_hand=Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())
    
    
    player_chips=Chips()
    
    take_bet(player_chips)
    
    show_some(player_hand,dealer_hand)
    
    while playing:
        hit_or_stand(deck,player_hand)
        
        show_some(player_hand,dealer_hand)
        
        if player_hand.value > 21:
            player_busts(player_hand,dealer_hand,player_chips)
            break
    if player_hand.value<=21:
        while dealer_hand.value < player_hand.value:
            hit(deck,dealer_hand)
        
        
        show_all(player_hand,dealer_hand)
        
        
        if dealer_hand.value > 21:
            dealer_busts(player_hand,dealer_hand,player_chips)

        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand,dealer_hand,player_chips)
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand,dealer_hand,player_chips)
        else:
            push(player_hand,dealer_hand)
        
    print(f"\n player total chips are at: {player_chips.total}")
    
    new_game=input("Do u want to continue (x/y):")
    if new_game[0].lower()=='y':
        playing=True
        break
    else:
        print("Thank u!!")
        break
        
    


        
    

            
    




